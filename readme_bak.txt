-------------------------------------------------------------------
bot_rt_07
-------------------------------------------------------------------
■2021/1/23
トレイリングストップが連続で動作してしまい、割り込んでいる

それ以降のエントリで、本当にエントリしなくてよかったのか？

今までのパラメタは1回勝負の利益のみ追及となっている
　本来のアルゴリズムの目的は、大きい変化前の特徴をつかんで
　トレンドフォローで追従すること。
　
＞　エントリ条件を緩和してみたほうがいい

エントリ条件を絞っているのは、最低購入枚数と、ボラティリティ条件である

＞　それぞれ条件をゆるくして、パラメタを調べるべし。

パラメタの選択は、最大利益だけで選んではいけない
　エントリ回数が多いこと
　勝率が高いこと
　
　・　目指すものは、エントリ後に正しくトレンドが発生していること
　・　トレンド発生しない場合は撤退し、損失が軽減できていること


・トレードリスクを0.5、最小エントリを0.010まで下げて、
　　sell, buy, volaを5刻みで45まで検索
　　
　利益、PF、トレード数、勝率でまずは絞り込みを行う
　
　　最大トレード回数はbuy, sellのボラが最小になった　ボラは関係なし
　　　＞単純にエントリ条件が増えているだけ
　　
　　最大利益　sell 10, buy 30 勝率 46
　　最大PF　　sell 10, buy 35 勝率 44.4
　　
　　　＞どちらもボラが最小の5だった
　　
　　sell, buyを10, 30で固定し、ボラを1〜10で再調査
　　＞　ボラは5で利益が最大だった
　　
　　sell, buyの範囲を絞る
　　＞　sell=8, buy=29で利益最大　ただし、10,30のときと変わらないかも
　　
　　　PF	最終損益
　　　22.93	8141
　　　
　　エントリ回数、ストップレンジを振ってみる
　　
　　エントリ回数は10, ストップレンジは4が最大。
　　　＞元と同じ
　　　
　価格、および収支とも理想的な上昇の仕方になっている
　リスク、ボラティリティで絞ってみる
　
　→　どちらもエントリを絞る方向なので、現在のパラメタに対して
　　　　損失を減らす方向にしか作用しない。
　　　　
　リスク、ボラティリティによる縛りは、PFが低い場合に効果が期待できるかも
　
　ボラティリティ比は寄与しなかった
　最小lot数は効果があるが、傾向はみられなかった
　
　トレードリスクが、最終収益に大きく寄与する
　　　→　おそらくＰＦが悪化すると思われるため、
　　　　　ここで最小lot数とボラティリティ比による絞り込みを行えればよいのでは。
　　　　　
　トレードリスク 2%t\とする
　
　　1/7までの結果なので、下降トレンドでも対応できる必要がある
　　トレイリングストップが連続動作しないように対応する必要がある
　　
　　
　　　



■2020/12/26
Traceback (most recent call last):
  File "main.py", line 125, in <module>
    daemon( price, last_data, flag, need_term, chart_log )
  File "/home/ec2-user/environment/python/work/bot_rt_07/daemon.py", line 54, in daemon
    new_price = data[-2]
IndexError: list index out of range

エラー停止。

過去ログから、エントリーしてほしい箇所をピックアップしたほうがいい

観察して、仮説を立て、修正する。

ボラティリティ閾値は、ばらつきが静まったかどうか判断するために導入しているはず
大トレンド前のボラティリティがどうだったのか、確認したほうがいい


■2020/11/17
・APIキーの失効は2020-11-24 21:27:49
・AWSの費用がかかるようになっている。

KEY更新
取得　2020-11-17 21:25:08	
失効　2021-02-17 21:25:08

再稼働 11/17 21:48

■2020/9/06 → 11月ごろまでにAPIキー更新。8月に失効させてしまった。

・分割回数を増やし、ストップレンジを極端に大きくすることで
　　ボラティリティが著しく低い場合にのみエントリする場合に削られる額を抑えられていた。
　　　ストップレンジを大きくすることで、最低注文枚数にひっかけることで、エントリを削った結果
　　　
　→　エントリ条件にボラティリティが低い場合を直接追加する。
　　　　初回エントリ時のみ適用、増し玉や決済時は遅れないように、従来通りの条件とする。
　　　　add_position、close_positionには手をいれない。
　　　　check_signal()をコピーしてcheck_volatirityを作成。entry_signal時のみ参照する

　PFは改善したかも。最適パラメタを探る必要あり
　
chart_sec_list  = [ 7200 ] 					# テストに使う時間軸
buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = np.arange( 6, 20, 2 ) 	# テストに使うボラティリティの期間
stop_range_list  = np.arange( 1,5,1 )		# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.10, 0.55, 0.05 ) 			# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 3, 15, 1 ) 	# テストに使う分割回数の幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
pivot_term_list  = [ 1 ]		 			# PIVOTの期間設定
sma1_term_list = [ 10 ]						# 移動平均線（速） 
sma2_term_list = [ 100 ]					# 移動平均線（遅）
judge_line_list = [
	{"BUY":"S2","SELL":"R2"},				# サポートに第2ラインを使用
]
judge_price_list = [
	{"BUY":"close_price","SELL":"close_price"},		# ブレイクアウト判定に終値を使用
]
judge_signal_list = [
	{"BUY":"donchian","SELL":"donchian"},			# シグナルはドンチャンチャンネル
]
judge_volatility_ratio_list = np.arange( 0.0045,0.0071,0.0001 )    # ボラティリティ終値比
stop_AF_list = [ 0.02 ] 							# 加速係数
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限

lot_limit_lower_list = [ 0.035 ]

→　テスト進捗率         : 81648/81648件 [100.0％]

PFが2.0以上、損益が3234

第1案

買い期間	8
売り期間	8
ボラティリティ期間	8
ストップレンジ	4
トレードリスク	0.15
分割回数	6
追加ポジション	2
ボラティリティ終値比	0.0066
加速係数	0.02
加速係数AF	0.02
加速係数MAX	0.3
注文lot数の下限	0.035
トレード回数	27
勝率	22.2
平均リターン	-0.08
ドローダウン	-949
PF	2.45
最終損益	3234

第2案

時間軸	7200
買い期間	8
売り期間	8
ボラティリティ期間	8
ストップレンジ	4
トレードリスク	0.2
分割回数	6
追加ポジション	2
ボラティリティ終値比	0.0066
加速係数	0.02
加速係数AF	0.02
加速係数MAX	0.3
注文lot数の下限	0.035
トレード回数	27
勝率	22.2
平均リターン	-0.09
ドローダウン	-1562
PF	2.22
最終損益	4028

第2案をベースにパラメタ確認。

#chart_sec_list  = { 7200, 3600, 300 } 		# テストに使う時間軸
chart_sec_list  = [ 7200 ] 					# テストに使う時間軸
#chart_sec_list  = [ 300 ] 					# テストに使う時間軸
buy_term_list   = np.arange( 7, 11, 1 ) 	# テストに使う上値ブレイクアウトの期間
#buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
sell_term_list  = np.arange( 7, 11, 1 ) 	# テストに使う下値ブレイクアウトの期間
#sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = np.arange( 6, 10, 1 ) 	# テストに使うボラティリティの期間
#volatility_term_list  = [ 8 ] 				# テストに使うボラティリティの期間
stop_range_list  = np.arange( 3,9,1 )		# テストに使うストップレンジの幅
#stop_range_list  = [ 6 ]					# テストに使うストップレンジの幅
#trade_risk_list  = np.arange( 0.10, 0.26, 0.02 ) 			# テストに使う1トレード当たりの損失許容の幅
trade_risk_list  = [ 0.20 ] 				# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 5, 11, 1 ) 	# テストに使う分割回数の幅
#entry_times_list  = [ 6 ] 					# テストに使う分割回数の幅
#entry_range_list  = np.arange( 1,6,1 )		# テストに使う追加ポジションの幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
#pivot_term_list  = np.arange( 1,10,1 ) 		# PIVOTの期間設定
pivot_term_list  = [ 1 ]		 			# PIVOTの期間設定
sma1_term_list = [ 10 ]						# 移動平均線（速） 
#sma1_term_list = np.arange( 5,15,1 )		# 移動平均線（速） 
sma2_term_list = [ 100 ]					# 移動平均線（遅）
#sma2_term_list = np.arange( 100,200,10 )		# 移動平均線（遅）
judge_line_list = [
	{"BUY":"S2","SELL":"R2"},				# サポートに第2ラインを使用
#	{"BUY":"S1","SELL":"R1"},				# サポートに第1ラインを使用
]
judge_price_list = [
	{"BUY":"close_price","SELL":"close_price"},		# ブレイクアウト判定に終値を使用
#	{"BUY":"low_price","SELL":"high_price"},		# ブレイクアウト判定に終値を使用
]
judge_signal_list = [
	{"BUY":"donchian","SELL":"donchian"},			# シグナルはドンチャンチャンネル
#	{"BUY":"pivot","SELL":"pivot"},					# シグナルはPIVOT
#	{"BUY":"sma_cross","SELL":"sma_cross"}			# シグナルは移動平均線によるDC/GC
]
#judge_volatility_ratio_list = np.arange( 0.0055,0.0076,0.0001 )    # ボラティリティ終値比
judge_volatility_ratio_list = [0.0066]    # ボラティリティ終値比
#stop_AF_list = np.arange( 0.03,0.11,0.01) 			# 加速係数
stop_AF_list = [ 0.02 ] 							# 加速係数
#stop_AF_add_list = np.arange( 0.01,0.04,0.01) 		# 加速係数を増やす度合
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
#stop_AF_max_list = np.arange( 0.15,0.55,0.05) 		# 加速係数の上限
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限

#lot_limit_lower_list = np.arange( 0.010,0.040,0.001)
lot_limit_lower_list = [ 0.035 ]



→　パラメタ抽出中だが、パラメタの初期資金が0.1USDBTCのため、
現状の0.017ベースだとトレードリスクを高めに取らなければならない。
初期資金0.017で以下の条件で見積もり。

#---------------------------------------------------------------------------------------------
#chart_sec_list  = { 7200, 3600, 300 } 		# テストに使う時間軸
chart_sec_list  = [ 7200 ] 					# テストに使う時間軸
#chart_sec_list  = [ 300 ] 					# テストに使う時間軸
#buy_term_list   = np.arange( 7, 11, 1 ) 	# テストに使う上値ブレイクアウトの期間
buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
#sell_term_list  = np.arange( 7, 11, 1 ) 	# テストに使う下値ブレイクアウトの期間
sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
#volatility_term_list  = np.arange( 6, 10, 1 ) 	# テストに使うボラティリティの期間
volatility_term_list  = [ 8 ] 				# テストに使うボラティリティの期間
#stop_range_list  = np.arange( 3,9,1 )		# テストに使うストップレンジの幅
stop_range_list  = [ 4 ]					# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.10, 0.75, 0.01 ) 			# テストに使う1トレード当たりの損失許容の幅
#trade_risk_list  = [ 0.20 ] 				# テストに使う1トレード当たりの損失許容の幅
#entry_times_list  = np.arange( 5, 11, 1 ) 	# テストに使う分割回数の幅
entry_times_list  = [ 6 ] 					# テストに使う分割回数の幅
#entry_range_list  = np.arange( 1,6,1 )		# テストに使う追加ポジションの幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
#pivot_term_list  = np.arange( 1,10,1 ) 		# PIVOTの期間設定
pivot_term_list  = [ 1 ]		 			# PIVOTの期間設定
sma1_term_list = [ 10 ]						# 移動平均線（速） 
#sma1_term_list = np.arange( 5,15,1 )		# 移動平均線（速） 
sma2_term_list = [ 100 ]					# 移動平均線（遅）
#sma2_term_list = np.arange( 100,200,10 )		# 移動平均線（遅）
judge_line_list = [
	{"BUY":"S2","SELL":"R2"},				# サポートに第2ラインを使用
#	{"BUY":"S1","SELL":"R1"},				# サポートに第1ラインを使用
]
judge_price_list = [
	{"BUY":"close_price","SELL":"close_price"},		# ブレイクアウト判定に終値を使用
#	{"BUY":"low_price","SELL":"high_price"},		# ブレイクアウト判定に終値を使用
]
judge_signal_list = [
	{"BUY":"donchian","SELL":"donchian"},			# シグナルはドンチャンチャンネル
#	{"BUY":"pivot","SELL":"pivot"},					# シグナルはPIVOT
#	{"BUY":"sma_cross","SELL":"sma_cross"}			# シグナルは移動平均線によるDC/GC
]
judge_volatility_ratio_list = np.arange( 0.0055,0.0076,0.0001 )    # ボラティリティ終値比
#judge_volatility_ratio_list = [0.0066]    # ボラティリティ終値比
#stop_AF_list = np.arange( 0.03,0.11,0.01) 			# 加速係数
stop_AF_list = [ 0.02 ] 							# 加速係数
#stop_AF_add_list = np.arange( 0.01,0.04,0.01) 		# 加速係数を増やす度合
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
#stop_AF_max_list = np.arange( 0.15,0.55,0.05) 		# 加速係数の上限
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限

#lot_limit_lower_list = np.arange( 0.010,0.040,0.001)
lot_limit_lower_list = [ 0.035 ]

初期資金0.017だと以下がよい

時間軸	7200
買い期間	8
売り期間	9
ボラティリティ期間	7
ストップレンジ	4
トレードリスク	0.2
分割回数	5
追加ポジション	2
ボラティリティ終値比	0.0066
加速係数	0.02
加速係数AF	0.02
加速係数MAX	0.3
注文lot数の下限	0.035
トレード回数	27
勝率	18.5
平均リターン	0.17
ドローダウン	-1824
PF	2.41
最終損益	5397

エントリー期間、ボラはこれまでより短くしてもよくなった。
シグナル発生しやすくなっても、ボラでエントリーを絞ったからと推測。

#chart_sec_list  = { 7200, 3600, 300 } 		# テストに使う時間軸
chart_sec_list  = [ 7200 ] 					# テストに使う時間軸
#chart_sec_list  = [ 300 ] 					# テストに使う時間軸
buy_term_list   = np.arange( 5, 10, 1 ) 	# テストに使う上値ブレイクアウトの期間
#buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
sell_term_list  = np.arange( 5, 10, 1 ) 	# テストに使う下値ブレイクアウトの期間
#sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = np.arange( 5, 10, 1 ) 	# テストに使うボラティリティの期間
#volatility_term_list  = [ 8 ] 				# テストに使うボラティリティの期間
#stop_range_list  = np.arange( 4,9,1 )		# テストに使うストップレンジの幅
stop_range_list  = [ 4 ]					# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.30, 0.75, 0.5 ) 			# テストに使う1トレード当たりの損失許容の幅
#trade_risk_list  = [ 0.20 ] 				# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 5, 11, 1 ) 	# テストに使う分割回数の幅
#entry_times_list  = [ 6 ] 					# テストに使う分割回数の幅
#entry_range_list  = np.arange( 1,6,1 )		# テストに使う追加ポジションの幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
#pivot_term_list  = np.arange( 1,10,1 ) 		# PIVOTの期間設定
pivot_term_list  = [ 1 ]		 			# PIVOTの期間設定
sma1_term_list = [ 10 ]						# 移動平均線（速） 
#sma1_term_list = np.arange( 5,15,1 )		# 移動平均線（速） 
sma2_term_list = [ 100 ]					# 移動平均線（遅）
#sma2_term_list = np.arange( 100,200,10 )		# 移動平均線（遅）
judge_line_list = [
	{"BUY":"S2","SELL":"R2"},				# サポートに第2ラインを使用
#	{"BUY":"S1","SELL":"R1"},				# サポートに第1ラインを使用
]
judge_price_list = [
	{"BUY":"close_price","SELL":"close_price"},		# ブレイクアウト判定に終値を使用
#	{"BUY":"low_price","SELL":"high_price"},		# ブレイクアウト判定に終値を使用
]
judge_signal_list = [
	{"BUY":"donchian","SELL":"donchian"},			# シグナルはドンチャンチャンネル
#	{"BUY":"pivot","SELL":"pivot"},					# シグナルはPIVOT
#	{"BUY":"sma_cross","SELL":"sma_cross"}			# シグナルは移動平均線によるDC/GC
]
#judge_volatility_ratio_list = np.arange( 0.0055,0.0076,0.0001 )    # ボラティリティ終値比
judge_volatility_ratio_list = [0.0066]    # ボラティリティ終値比
#stop_AF_list = np.arange( 0.03,0.11,0.01) 			# 加速係数
stop_AF_list = [ 0.02 ] 							# 加速係数
#stop_AF_add_list = np.arange( 0.01,0.04,0.01) 		# 加速係数を増やす度合
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
#stop_AF_max_list = np.arange( 0.15,0.55,0.05) 		# 加速係数の上限
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限

#lot_limit_lower_list = np.arange( 0.010,0.040,0.001)
lot_limit_lower_list = [ 0.035 ]

以下を導き出した。

時間軸	7200
買い期間	7
売り期間	5
ボラティリティ期間	7
ストップレンジ	4
トレードリスク	0.3
分割回数	5
ボラティリティ終値比	0.0066
注文lot数の下限	0.035
トレード回数	31
勝率	35.5
平均リターン	0.27
ドローダウン	-658
PF	2.06
最終損益	1451

→　2020/1/1からでもパフォーマンス高いが、通年でも利益が出せる。

シグナル、ボラ期間を短い側でさらに調査。

# バックテストのパラメーター設定
#---------------------------------------------------------------------------------------------
#chart_sec_list  = { 7200, 3600, 300 } 		# テストに使う時間軸
chart_sec_list  = [ 7200 ] 					# テストに使う時間軸
#chart_sec_list  = [ 300 ] 					# テストに使う時間軸
buy_term_list   = np.arange( 3, 8, 1 ) 	# テストに使う上値ブレイクアウトの期間
#buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
sell_term_list  = np.arange( 3, 8, 1 ) 	# テストに使う下値ブレイクアウトの期間
#sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = np.arange( 4, 10, 1 ) 	# テストに使うボラティリティの期間
#volatility_term_list  = [ 8 ] 				# テストに使うボラティリティの期間
#stop_range_list  = np.arange( 4,9,1 )		# テストに使うストップレンジの幅
stop_range_list  = [ 4 ]					# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.10, 0.45, 0.05 ) 			# テストに使う1トレード当たりの損失許容の幅
#trade_risk_list  = [ 0.20 ] 				# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 2, 11, 1 ) 	# テストに使う分割回数の幅
#entry_times_list  = [ 6 ] 					# テストに使う分割回数の幅
#entry_range_list  = np.arange( 1,6,1 )		# テストに使う追加ポジションの幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
#pivot_term_list  = np.arange( 1,10,1 ) 		# PIVOTの期間設定
pivot_term_list  = [ 1 ]		 			# PIVOTの期間設定
sma1_term_list = [ 10 ]						# 移動平均線（速） 
#sma1_term_list = np.arange( 5,15,1 )		# 移動平均線（速） 
sma2_term_list = [ 100 ]					# 移動平均線（遅）
#sma2_term_list = np.arange( 100,200,10 )		# 移動平均線（遅）
judge_line_list = [
	{"BUY":"S2","SELL":"R2"},				# サポートに第2ラインを使用
#	{"BUY":"S1","SELL":"R1"},				# サポートに第1ラインを使用
]
judge_price_list = [
	{"BUY":"close_price","SELL":"close_price"},		# ブレイクアウト判定に終値を使用
#	{"BUY":"low_price","SELL":"high_price"},		# ブレイクアウト判定に終値を使用
]
judge_signal_list = [
	{"BUY":"donchian","SELL":"donchian"},			# シグナルはドンチャンチャンネル
#	{"BUY":"pivot","SELL":"pivot"},					# シグナルはPIVOT
#	{"BUY":"sma_cross","SELL":"sma_cross"}			# シグナルは移動平均線によるDC/GC
]
#judge_volatility_ratio_list = np.arange( 0.0055,0.0076,0.0001 )    # ボラティリティ終値比
judge_volatility_ratio_list = [0.0066]    # ボラティリティ終値比
#stop_AF_list = np.arange( 0.03,0.11,0.01) 			# 加速係数
stop_AF_list = [ 0.02 ] 							# 加速係数
#stop_AF_add_list = np.arange( 0.01,0.04,0.01) 		# 加速係数を増やす度合
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
#stop_AF_max_list = np.arange( 0.15,0.55,0.05) 		# 加速係数の上限
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限

#lot_limit_lower_list = np.arange( 0.010,0.040,0.001)
lot_limit_lower_list = [ 0.035 ]

→　2020/1/1からでは高いPF(2.8)を出せたが、通年ではマイナスになった。

時間軸	7200
買い期間	7
売り期間	5
ボラティリティ期間	7
ストップレンジ	4
トレードリスク	0.3
分割回数	5
ボラティリティ終値比	0.0066
注文lot数の下限	0.035
トレード回数	31
勝率	35.5
平均リターン	0.27
ドローダウン	-658
PF	2.06
最終損益	1451

2020/9/9 0:13 稼働開始。

2020/9/9 8:23停止。

teapot for urlは本来帰らないエラーらしい。
リクエスト数が多くなりすぎた。
CPU当たり、許容する時間が決まってるので、1時間後に再開させる。
waitを10秒から時間を増やして最大1時間まで遅らせるロジックが必要。

まず基本のwaitを60秒にする。
エラーが発生した場合はx2, x4, x10, x60(MAX)

時間： 2020/09/08 21:00 高値： 10078.94 安値： 9930 終値： 9982.99
時間： 2020/09/08 23:00 高値： 10050 安値： 9920.32 終値： 9990.15
時間： 2020/09/09 01:00 高値： 10153.96 安値： 9979 終値： 10098.58
Cryptowatchの価格取得でエラー発生 : 418 Client Error: I'm a teapot for url: https://api.cryptowat.ch/markets/binance/btcusdt/ohlc?periods=7200
10秒待機してやり直します
時間： 2020/09/09 03:00 高値： 10168.81 安値： 10086.49 終値： 10159.19
Cryptowatchの価格取得でエラー発生 : 429 Client Error: Too Many Requests for url: https://api.cryptowat.ch/markets/binance/btcusdt/ohlc?periods=7200
10秒待機してやり直します
Cryptowatchの価格取得でエラー発生 : 429 Client Error: Too Many Requests for url: https://api.cryptowat.ch/markets/binance/btcusdt/ohlc?periods=7200
10秒待機してやり直します
Cryptowatchの価格取得でエラー発生 : 429 Client Error: Too Many Requests for url: https://api.cryptowat.ch/markets/binance/btcusdt/ohlc?periods=7200
10秒待機してやり直します

-------------------------------------------------------------------
bot_rt_06
-------------------------------------------------------------------
最終更新日 2020/5/10 → 7月ごろまでにAPIキー更新

■ bitmex 日本撤退によりBybitに鞍替えを試す


・5/12 BTC半減期のため、5/12以降に参入できるように事前準備を行う
・ccxtによるbybitに対するコマンド発行が正常に行えること
   APIキー発行　済 ただし3か月しか有効にならない。
   CCXT　残高取得確認
   　　　 注文確認
   　　　ccxはバージョン 1.24.からbybit対応のため、pipでCCXTを更新。
・cryptwatchからbitmexでなくBTCUSD価格が取得できること → binanceで代用
・price_dataをBTCUSDで取得できるようにすること → USDで代用

・price_dataは可能ならサーバ上で実行できるようにする
　　1hと2hだけにするか。

→ 修正完了、2020/5/16 0時57分、稼働。
    order.pyでflag参照不足。symbol_type→5/17修正し再稼働
    
・2020/8/24 bybit {"ret_code":33004,"ret_msg":"api_key expire","ext_code":"","ext_info":"","result":null,"time_now":"1598271283.931430"}
   API期限切れにつき停止。

発行　2020-05-12 23:36:11	　停止　2020-08-12 23:36:11
発行　2020-08-24 21:27:49	　停止　2020-11-24 21:27:49

・8/29 メモ

6/28〜8/28※ において、現状のパラメタでは利益が出ていない。
→ボラを17から7にするとPFが1.3くらい

以下を施行する。

・gitHubへのソース登録、AWS / ローカル環境でのソース共有

https://github.com/do3-1979/sy79pthn_01

・※の期間でPFが1を超えるパラメタを探す

・探したパラメタが6月以前の3か月間でも同様の効果があるか確認する
・過去データから勝率とPFに着目したパラメタ探求した場合、過去3か月と
　　全過去データとの比較結果に違いはあるか？
　勝率に注目すれば、どんな相場でも（少なくとも）負けないパラメタになるか？
　　を確認するべき
　　
・初期資金と最低注文数の関係が大きく影響しているのでは？
　　抽出したパラメタは資金を増やしても同じか確認が必要
　　
　gain curveがおおよそ右肩上がりで推移しなければならない
　　　期間によって高い・低いがあってはNG
　　　
　過去にさかのぼって常に右肩上がり　→　儲け幅が少なくなる可能性あり。
　さかのぼる過去を1年まで見るか、直近の3か月程度にするか。
　取??のトレンドは変化するが、変化がどれくらいの期間で移り変わっているか？
　
　たまたま高い利益がでる取引に当たって、その利益分からのマイナスに耐えられる仕組みがいる
　
　そもそもトレンドフォロー型はたまにくる大勝ちに乗るため、勝率はそもそも高くない
　次を満たすことが”すぐれたトレンドフォロー型BOT”となる
　
　・たまにくる大勝ち（＝大トレンド）を残さず拾える（勝率は求めない）
　・日々の削られる額を減らす
　
　上記の要件を指標で評価できるか？
    １）運用成績（≒CAGR）
    　　　これは単に「運用成績」を年率に換算しただけの数値です。
        　同じ期間を使ってテストするのであれば、いままでどおり運用成績を使って問題ありません。
        　しかし１時間足と２時間足を比較する場合や、去年（〜12月）と今年（〜5月）を比較する場合など、
        　前提のテスト期間が異なる場合は、年率に換算しないと比較できません。そこでCAGRを使います。
    ２）プロフィットファクター
    　　　総利益 を 総損失 で割った数値。この数値の中に、勝率・損益レシオ・期待値などの
    　　　要素が総合的に含まれている。勝率の悪さから生じる「連敗する確率」を
    　　　一切考慮していないので、途中過程でどのくらいのドローダウンに
    　　　見舞われる可能性があるかは、この数値からは全く見当がつきません。
        　そのため、最初のMARレシオと併せて比較することが多いです。
    ３）シャープレシオ
    　　　平均リターン（１回のトレードの期待値）をリターンの標準偏差で割った数字。
    　　　平均リターンを分子に、そのバラつき具合（標準偏差）を分母にとることで、
    　　　リターンの安定性を図ります。高ければ高いほど毎回のトレードで安定したリターンが期待できます。
    　　　→　トレンドフォロー型では高くならない？
    ４）MARレシオ　
    　　　運用成績を最大ドローダウン率で割った数字。資産が１％減るリスク（覚悟）を受け入れる
    　　　代わりに何％のリターンが期待できるか、という指標です。分子にリターンをとって
    　　　分母にリスクをとっているので、大きいほど良い数字になります。
    
    リターン分布形状で、左右非対称性こそが、トレンドフォローBOTの利益の源泉??

パラメタの相関関係を考える
＜エントリーポイント＞
buy_term_list   = np.arange( 7, 11, 1 ) 	# テストに使う上値ブレイクアウトの期間
sell_term_list  = np.arange( 7, 11, 1 ) 	# テストに使う下値ブレイクアウトの期間
→　エントリシグナル、売り抜けの判断。
　　　直近でばらつきが抑えられていて、かつ抜けた場合になる。
　　　値が小さいほど誤検出するが、大きすぎてもそんなに長期間ぶれないことはないので
　　　　エントリできなくなってしまう
　　　
＜エントリーサイズ＞
volatility_term_list  = np.arange( 4, 30, 2 ) 	# テストに使うボラティリティの期間
→　価格変動の大きさを表す。エントリシグナルに対するフィルタ。エントリの精度を上げる
　　　1回のエントリーサイズの計算、ピラミッディングの追加判定にも使っている。
　　　ピラミッディングの追加判定は初回計算時のボラを使っている。
　　　　エントリー時のボラとトレンド発生時のボラで言えば、エントリー時のほうが適しているか？

stop_range_list  = [ 6 ]					# テストに使うストップレンジの幅
→　エントリ時は必要最低限の損失回避。
　　　ポジション形成後はトレイリングストップになるが、そのときは関係ない。
　　　初回に不用意にひっかからないため。
　　　ボラティリティ x レンジでストップ値を決めているので、ボラティリティが大きいとストップ値も離れてしまう。
　　　総購入ロット数も分母にストップ値があり、ストップ値が大きいと購入するロットが小さくなってしまう

trade_risk_list  = np.arange( 0.10, 0.51, 0.05 ) 			# テストに使う1トレード当たりの損失許容の幅
→　利益の量に寄与。大きくすればトレンドフォロー時の利益も大きいが
　　　普段の削られ時の損失も大きくなる

entry_times_list  = np.arange( 3, 21, 1 ) 	# テストに使う分割回数の幅
→　一回当たりのエントリ量の調整。ただし全弾購入してポジション形成まで
　　　トレイリングストップが効かなくなる。
　　　ただしトレイリングストップは大トレンドに乗った場合のみ有効になればいいとも言える。

entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
→　追加ポジションの幅。エントリ回数に寄与

stop_AF_list = [ 0.02 ] 							# 加速係数
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限
→　トレイリングストップの追い方。

lot_limit_lower_list = [ 0.035 ]
→　購入ロット数の下限値。ロットが小さくなったときの不要なエントリを防いでいる。


・日々の削られを減らすには以下が有効だったが、トータルの儲けも減ってしまう。
　　トレードリスク減らす
　　分割回数を増やす

分割数を増やすと削られリスクが減るがトータルの儲けも減る。
それが大トレンドになりそうかどうかを予測できればいいんだが、、

・シグナルの期間とボラを固定し（全部8）、
　　トレードリスク、分割回数、ストップ幅、エントリ幅を詳細に振って
　　2020/1月から評価を出してみる

　　初期資金はstart_funds = 0.10 * 12000　とする
　　
buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = [ 8 ] 				# テストに使うボラティリティの期間
stop_range_list  = np.arange( 1,20,1 )		# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.10, 0.51, 0.01 ) 			# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 3, 21, 1 ) 	# テストに使う分割回数の幅
entry_range_list  = np.arange( 1,6,1 )		# テストに使う追加ポジションの幅

lot_limit_lower_list = [ 0.035 ]

→　およそ7万件。
result-partial-2020-09-01-16-12.xlsx

PFを縦軸にとって散布図をとって確認した結果、

追加ポジションは2固定でよい。
ストップレンジは、普段のストップにかからないようなレンジにすることでPFが伸びるケースがあった
　レンジが18以上など。
リスクは分割回数が大きい場合はリスクも大きくとったほうがよいパターンもある。

ストップレンジの代わりにボラティリティを変えてみる。

buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
#sell_term_list  = np.arange( 7, 11, 1 ) 	# テストに使う下値ブレイクアウトの期間
sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = np.arange( 4, 31, 2 ) 	# テストに使うボラティリティの期間
#volatility_term_list  = [ 8 ] 				# テストに使うボラティリティの期間
stop_range_list  = np.arange( 5,20,1 )		# テストに使うストップレンジの幅
#stop_range_list  = [ 6 ]					# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.10, 0.51, 0.02 ) 			# テストに使う1トレード当たりの損失許容の幅
#trade_risk_list  = [ 0.35 ] 				# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 3, 21, 1 ) 	# テストに使う分割回数の幅
#entry_times_list  = [ 6 ] 					# テストに使う分割回数の幅
#entry_range_list  = np.arange( 1,6,1 )		# テストに使う追加ポジションの幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅

lot_limit_lower_list = [ 0.035 ]

→　およそ8万件。

ボラ6が最大の傾向があり、分割数は8と16がPFが高くなる
ストップレンジは19。トレードリスクが、8のとき0.50、16の時が0.26となるので
分割回数とトレードリスクは逆相関になっている。
　→単純に大きいトレンドをフォローするから。
　　　分割数を小さくしたとき、エントリする可能性が高くなるが
　　　　　トレードリスクを高くとることで同じ結果になっていると予想。
　　　　　
　ストップレンジが大きい。通常のストップ遷移が役立っていない可能性がある。
　　しかし、従来どおりトレンドレンジを6で取った場合のほうが、PFが下がってパフォーマンスが悪くなる。
　　　ストップが有効に効いていないということ。
　　　
　

7か月で2倍程度。割が合わない


chart_sec_list  = [ 7200 ] 					# テストに使う時間軸
buy_term_list   = [ 8 ] 					# テストに使う上値ブレイクアウトの期間
sell_term_list  = [ 8 ] 					# テストに使う下値ブレイクアウトの期間
volatility_term_list  = np.arange( 6, 20, 2 ) 	# テストに使うボラティリティの期間
stop_range_list  = np.arange( 5,20,3 )		# テストに使うストップレンジの幅
trade_risk_list  = np.arange( 0.10, 0.51, 0.10 ) 			# テストに使う1トレード当たりの損失許容の幅
entry_times_list  = np.arange( 3, 21, 3 ) 	# テストに使う分割回数の幅
entry_range_list  = [ 2 ]					# テストに使う追加ポジションの幅
pivot_term_list  = [ 1 ]		 			# PIVOTの期間設定
sma1_term_list = np.arange( 5,15,1 )		# 移動平均線（速） 
sma2_term_list = np.arange( 100,200,10 )		# 移動平均線（遅）
judge_line_list = [
	{"BUY":"S2","SELL":"R2"},				# サポートに第2ラインを使用
]
judge_price_list = [
	{"BUY":"close_price","SELL":"close_price"},		# ブレイクアウト判定に終値を使用
]
judge_signal_list = [
	{"BUY":"sma_cross","SELL":"sma_cross"}			# シグナルは移動平均線によるDC/GC
]
stop_AF_list = [ 0.02 ] 							# 加速係数
stop_AF_add_list = [ 0.02 ]							# 加速係数を増やす度合
stop_AF_max_list = [ 0.30 ]							# 加速係数の上限

lot_limit_lower_list = [ 0.035 ]

→ 10万件

分析必要。異常な利益を出せるが、ドローダウンも大きすぎる。

C:\python\work\bot_rt_06\backtest\result-partial-2020-09-05-20-08.xlsx

取引回数15以上でソートしたパラメタだが、過去に適用すると運用できない。

-------------------------------------------------------------------
bot_rt_05
-------------------------------------------------------------------
最終更新日 2020/3/13

■ cryptowatch 価格取得処理のwaitの定義ミスにより停止。
　　修正必要

  File "/home/ec2-user/environment/python/work/bot_rt_04/pos_mng.py", line 32, in get_price
    out_log("{0}秒待機してやり直します".format(wait), flag)
NameError: name 'wait' is not defined

→　修正済

■ 新パラメタで運用開始 3/15

lot数の小数点切り捨てを見直し、再シミュレーション実施。
以下のパラメタで再開。

時間軸	7200
買い期間	7
売り期間	7
ボラティリティ期間	17
ストップレンジ	6
トレードリスク	0.55
分割回数	6
注文lot数の下限	0.035
トレード回数	31
勝率	35.5
平均リターン	-0.46
ドローダウン	-92
PF	1.53
最終損益	421

-----------------------------------
期間                : 2020/01/01 01:00〜2020/03/15 23:00
時間軸              : 120分足で検証
パラメータ１〜２    : 7期間 / 買い 7期間 / 売り
パラメータ３        : 1期間 / PIVOT
パラメータ４        : 17期間
パラメータ５        : 6ストップレンジ
パラメータ６        : 0.55％
パラメータ７〜８    : 6分割 2追加ポジション
パラメータ９〜１１  : 0.02加速係数 0.02増加度 0.3上限
パラメータ１２      : 0.035注文lot数の下限
900件のローソク足データで検証
-----------------------------------

-----------------------------------
全トレード数       :  21回
勝率               :  42.9％
平均リターン       :  -0.54％
平均保有期間       :  25.6足分
損切りの回数       :  1回

最大の勝ちトレード :  161USD
最大の負けトレード :  -70USD
最大連敗回数       :  3回
最大ドローダウン   :  -110.0USD / -29.7％
利益合計           :  385USD
損失合計           :  -224USD
最終損益           :  161USD

初期資金           :  300.0USD
最終資金           :  461.0USD
運用成績           :  153.67％
手数料合計         :  -24USD
-----------------------------------
各成績指標
-----------------------------------
CAGR(年間成長率)         :  732.32％
MARレシオ                :  1.81
シャープレシオ           :  -0.2
プロフィットファクター   :  1.72
損益レシオ               :  0.79
-----------------------------------

■ 売買ロジックの修正検討

・SMAのGC/DCベースにしたいが、現行では増し玉（ピラミッディング）を積み終える前に
　　反転するため、トレイリングストップは機能していない。
　　
　　ピラミッドで更新するストップによって取引が中断している。
　　
・ストップ幅は、エントリー幅の倍数で決めている。
　　ストップ幅を大きくしすぎると、シグナルがフェイクだった場合のロスが大きくなってしまい
　　　細かく負け続けてしまう
　　
・エントリー幅は、過去のボラティリティから失うリスクに基づき算出し、
　　ストップ幅もそれにならって決めている
　　
・利確シグナル時に反転売買して即損失を出している。（ドテン失敗？）

＜アクション＞
・ドテン外し　→　済
・wait不具合修正。pos_mngなど、waitを参照する箇所の関数内での変数追加　→　済

＜課題は？＞
・ピラミッドは、買い入れ総額が高くなり利益が減るが、シグナルがフェイクだったときのリスクも減る。

・ストップ幅は、小さすぎると即引っかかる。
    →  SMA 100とDCの低いほうを採用する案。

・トレイリングストップは、ピラミッド完了後に発動しているが、ピラミッドとの役割分担は？
　　→　ピラミッドはリスク分散なので、エントリーしたい金額を分割してリスクを減らすことが目的。
　　　　トレイリングストップは、エントリーしたい全金額をエントリー後の値動きに対して、
　　　　利益を確保するのが目的
　　→　ピラミッドができてからトレイリングストップ???すればいい？
　　　　　ピラミッド構築中でもストップを更新すれば、損失を回避できる可能性あり
　　
・ストップの決め方　単純にSMA200をストップとすれば、レンジ相場は効果的に機能するはず
　トレンド相場の時のストップの決め方が課題か。
　
・GC/DCのSMAの期間を短くすれば、エントリー回数は増える。50/200だと使い物にならない。
    50/100からさらに調整。
    
　DCが直近のサポート、レジスタンスを示すので、DCかSMAのうち、より離れている方をストップとして使うこともできそう
　
・DCはその期間内の最大値、最小値を超えた場合をシグナルとしている
　　→　直近の期間内でのサポート・レジスタンスにする形。
　　
・ボラティリティは期間内の高値の合計から安値の合計を引いて、期間内で割ったもの
　　→　その期間内の変動幅の指標、ばらつきのリスクを表す。
　　
　DC、SMAそれぞれサポート、レジスタンスとして機能しそう
　
　　DC　＜　SMA（SMAは期間が長いほど強い）　の順か。
　
・SMA GC/DCにピラミッド併用するか？ピラミッドの数は？
　　

-------------------------------------------------------------------
bot_rt_04
-------------------------------------------------------------------
最終更新日 2020/1/10

■条件見直し　

買い期間	8
売り期間	7
PIVOT期間	1
ボラティリティ期間	22
ストップレンジ	1
トレードリスク	0.11
分割回数	12
追加ポジション	2
判定基準	終値/終値
加速係数	0.03
加速係数を増やす度合	0.01
加速係数の上限	0.15
注文lot数の下限	0.03
トレード回数	16
勝率	12.5
平均リターン	-1.23
ドローダウン	-120
PF	1.34
最終損益	208.4738


■条件見直し 2020/1/1 10:18 エントリー

主な変更点：

・トレードリスクが少なすぎるとエントリーできないため0.05から0.12に見直し
・パラメタ見直し
・ストップ値更新のみ最新値を使って10sec間隔で実施
    トレイリングストップも10sec間隔で見直しされる可能性があるため注意

＜パラメタ＞
時間軸		            7200
買い期間		        8
売り期間		        20
PIVOT期間		        1
ボラティリティ期間		15
ストップレンジ		    1
トレードリスク		    0.12
分割回数		        11
追加ポジション		    2
判定ライン		        S2/R2
判定基準		        終値/終値
加速係数		        0.06
加速係数を増やす度合	0.01
加速係数の上限		    0.25
注文lot数の下限		    0.03


-------------------------------------------------------------------
bot_rt_03
-------------------------------------------------------------------
最終更新日 2019/12/31

■実際の損失額がシミュレーションと大きく異なる 12/27

時間： 2019/12/24 03:00 高値： 7697 安値： 7370 終値： 7393
トレイリングストップの発動：ストップ位置を7436USDに動かして、加速係数を0.08に更新します
7436USDの損切ラインに引っかかりました。
現在の9期間の平均ボラティリティは96USDです
7434USDあたりで成行注文を出してポジションを決済します
BitmexのAPIでエラー発生 = bitmex {"error":{"message":"The system is currently overloaded. Please try again later.","name":"HTTPError"}}
注文の通信が失敗しました。30秒後に再トライします
スリッページ・手数料として 2USDを考慮します
-5USDの損失です

→　実際は44usdの損失。

ログ上の購入額と実際の購入額を比較する。

損益計算の際、約定した金額ではなくストップ値を使っているため
実際　      7381    に対し
ストップ値  7436　　のため
55USDの差額が出ていることが原因。

・執行時の約定価格を使うこと
・ストップ値は指値で入れること

が必要。

・現在値の取得の仕方
・執行時の約定価格の取得の仕方
・ストップ値に指値を入れる
　　ストップに引っかかったことを検出する必要がある

変更内容：
メインループで10secごとに現在値を確認しているので
　メインループでstopのみ常時チェックを行うようにする。

stop_positionでの計算方法はstop_priceを使うのではなく
data["low_price"]を使う。

→既存のパラメタでは損失となる。見直し。

■理由不明で更新停止 12/21

強制的に停止、再起動

時間： 2019/12/21 11:00 高値： 7188 安値： 7155 終値： 7157
^CTraceback (most recent call last):
  File "main.py", line 92, in <module>
    daemon( price, last_data, flag, need_term)
  File "/home/ec2-user/environment/python/work/bot_rt_03/daemon.py", line 54, in daemon
    time.sleep(time_wait)
KeyboardInterrupt

ログファイルを
bot_rt_03_001_191211_0700_1221_1100.log
として取得

→ cryptowatch側が停止していた。bot側は正常。

■bot_rt_03 実戦投入 2019/12/01 22:02

ファイル分割後のバックテストNG問題を修正し、
パラメタ再検討の上投入

全期間で計算したパラメタで投入したが、
1か月ごとのパラメタ計算結果のばらつきを調べる必要がある

価格情報を??得して更新するプログラム作成。
定期的に自動実行する仕組みが必要

bot_rt_03_001.logを確実に保存しておき、バックテストとの比較を行う。

→order.py で wait未定義によるエラーで停止。cryptowatchからのエラーで停止する問題を修正。

■5分足でパラメタ計算
→PFが1.1前後、約に立たない

■月別で分割数を1~50で試してみた
→1〜30でそれぞれ最高益あるが、少なくとも30以上はなし

■bot_rt_03 実戦投入 2019/11/27 0:03

■バックテストとトータルテストを同一関数になるように修正

やり残したこと：
　・トータルテスト時のグラフ出力NG、暫定フラグによる回避
　・flag変数へのバックテストフラグ、トータルテストフラグ追加と
　　トータルテスト実行時のフラグ自動変換

　・本番運用の差し替え（AWS) → 済

　・価格ファイルからの読み込み対応 → 済

■ピボット逆張り検討

１．ピボット反転サインでエントリ
２．ボラティリティが一定以下である
３．ピボット反転サインでドテン

許容する損失額は口座の何パーセントか決める
エントリと同時にストップを入れる
反転サインが出たらストップをキャンセルして入れなおす
すべて指値で行う。ストップはストップオーダー。

パラメタ案：
１．ピボット期間
２．損切幅
３．エントリーするボラティリティの基準
４．ボラティリティ期間
５．サイン判定は現在値か終値か。

→ ピボットはPFが最大でも1.4くらい、戦略として向かない

-------------------------------------------------------------------
accumlate_price_data.py
-------------------------------------------------------------------
最終更新日 2019/11/22

■ローソク足を取得する関数を作成。
5分、1時間、2時間足を作成する。
既存のファイルは最終時間をつけてバックアップし
新しいファイルに不足分を上書きする。


-------------------------------------------------------------------
bot_rt_02_001.py
bot_rt_02_param.py
-------------------------------------------------------------------
最終更新日 2019/11/07

■5分足では利益がでない可能性。
   2時間足での最適パラメタの抽出を行う。
   
最小lot数は0.03で固定で計算。
パラメタが決まったら、最小lot数を変えてどれだけ見送られるか確認する

トレイリングストップのパラメタは固定。パラメタが絞れたら微調整する。

エントリー数が少なすぎるのは外す。100回以上でフィルタする。
エントリー数が少ない＝過剰フィッティングされていると判断するべき。

パラメタは以下で。
result-2019-11-06-05-32.xlsx
result-2019-11-06-23-48.xlsx

時間軸	7200
買い期間	10
売り期間	19
ボラティリティ期間	10
ストップレンジ	1
トレードリスク	0.05
分割回数	10
追加ポジション	2
判定基準	終値/終値
加速係数	0.02
加速係数を増やす度合	0.01
加速係数の上限	0.24
注文lot数の下限	0.03
トレード回数	189
勝率	9
平均リターン	-0.13
ドローダウン	-9912
PF	8.2
最終損益	311967.7015

2019/11/7 0.09 9348.0 運用開始。

bot_rt_02_001.py

・LINE通知は損益のみ
・8時間ごとに稼働状況通知

-------------------------------------------------------------------
bot_rt_01_001.py
bot_rt_01_param.py
-------------------------------------------------------------------
最終更新日 2019/11/03

■実戦 real trade No.1 

5分足で実践投入
初期資金0.035XBT

2019/10/26 13:09開始。XBTUSD = 9540.5

時間軸	300
買い期間	20
売り期間	20
ボラティリティ期間	10
ストップレンジ	1
トレードリスク	0.02
分割回数	17
追加ポジション	2
判定基準	終値/終値
加速係数	0.01
加速係数を増やす度合	0.02
加速係数の上限	0.25
トレード回数	280
勝率	3.2
平均リターン	-0.15
ドローダウン	-285
PF	2.26
最終損益	1017

■パラメタ調整

・削られるパターンが多いため、注文できる最小lot数を調査する
・XBTUSD以外の通貨ペアでのパフォーマンスを検証　
　　ざっくりで他の通貨ペアを検証してみる
　
　→ 最小lot数を0.041に更新。
　
・最小lot数は、持っている資産をベースに割合を求めるべき
　→　元資産にかける指数を、総当たりで割り出してみる
　
　1.18 ※手持ち資産で0.0413lotの計算になる。より設けが多くなった

■シミュレーションとの動作?????較

2019/10/26 13:10から開始で比較 → ほぼ現実通りだった

-----------------------------------
総合の成績
-----------------------------------
全トレード数       :  1回
勝率               :  0.0％
平均リターン       :  -0.22％
平均保有期間       :  4.0足分
損切りの回数       :  1回

最大の勝ちトレード :  -1USD
最大の負けトレード :  -1USD
最大連敗回数       :  0回
最大ドローダウン   :  -0.0USD / -0.0％
利益合計           :  0USD
損失合計           :  -1USD
最終損益           :  -1USD

初期資金           :  326.9175USD
最終資金           :  325.9175USD
運用成績           :  99.69％
手数料合計         :  0USD

■2019/11/4 勝ちトレードと手数料の差分の比較

実トレードのログ上は35USDの利益
実際は-26USDの損失
取得単価9202で0.033074 = 304.346948
終値    9186で0.030295 = 278.28987

シミュレーションでは10USDの利益 (手数料は12USD)


手数料はエントリー時、売却時それぞれでかかっているため
実トレードでもそれを考慮する必要あり

14053 lot なので、0.075%の手数料を往復として
1053 USD x 2 = 2107

利益の計算の仕方：Bitmexより
-----------------
メイカー料金 -0.025%
テイカー料金 0.075%

100 XBTUSD 契約を価格 600 USDで購入します。
購入契約数： 100 XBT * 600 USD = 60,000 枚。 
数日後、この契約が 700 USD に値上がりしました。

この取引の利益は次の式で計算されます：60,000 * 1 * (1/600 - 1/700) = 14.286 XBT

価格が 500 USD に下落していたならば、損失額は次のように計算されます：
60,000 * 1 * (1/600 - 1/500) = -20 XBT. 
損失額の方が大きいのは、この契約が インバースで非リニア という性質を備えるためです。 
対照的に、ショートの場合は、下落時の利益の方が上昇時の損失より大きくなります。
-----------------

・分割エントリー時の手数料を乗せる → 乗っていた。
　手仕舞い時(close_position)と損切り時（stop_position)に手数料が乗っていない
　　→　成り行き決済なので不要。
・実ログでも取引手数料を乗せるべき → 乗せた

・10/26以降でパラメタ検索を実施
　　→ PFが1.08を超えない。この期間ではどのパラメタを用いても利益はでない。
bot_rt_01_param_from_1026.py

■実戦 real trade No.1 

5分足で実践投入
初期資金0.027XBT

2019/11/04 12:24開始。XBTUSD = 9167.0

-----------------------------------
総合の成績
-----------------------------------
全トレード数       :  17回
勝率               :  5.9％
平均リターン       :  -0.12％
平均保有期間       :  9.2足分
損切りの回数       :  15回

最大の勝ちトレード :  10USD
最大の負けトレード :  -13USD
最大連敗回数       :  7回
最大ドローダウン   :  -23.0USD / -7.1％
利益合計           :  10USD
損失合計           :  -34USD
最終損益           :  -24USD

初期資金           :  326.9175USD
最終資金           :  302.9175USD
運用成績           :  92.66％
手数料合計         :  -32USD

-------------------------------------------------------------------
bot_03.py
bot_03_param.py
-------------------------------------------------------------------
最終更新日 2019/10/22

【本体：bot_03.py】

■lot計算にミス、lotは現在の価格に対する分割の比率。
現在の価格 x lot を枚数とするための指標。lot計算を修正してパラメタ再調整

リスク 0.05〜0.15で調整、リスクが小さいほどPFが高くなり、最終損益が下がるトレードオフの完全相関。
分割回数 11〜16で調整、分割回数が大きいほどPFが高くなり、最終損益が下がるトレードオフの完全相関。

リスクの上限と分割回数の上限を調べる。

リスク 0.05〜30.0まで0.01刻み → 一度に3割以上失うのはNG
分割回数 10〜40まで1刻み

PFごと、最終損益ごとの分布を調べる

result-2019-10-22-03-17.xlsx
・価格取得
　 - cryptowatch XBT/USD 2時間足
・エントリー条件
   - 増し玉 17分割
   - トレードリスク 15%
　 - ドンチャンブレイクアウト 買い：39 売り 39期間
　 - 判定：終値
　 - 平均ボラティリティ 22期間
　 - ドテン
・パラボリックSAR トレイリングストップ
・稼働通知
   - LINE通知
     > 6時間ごとにポジションを通知
   　> エントリー、クローズを通知
・バックテスト

・細かいパラメタ修正。

【パラメタ検証用：bot_03_param.py】

・リスク0.15、分割17で再度買い期間、売り期間、ボラティリティ最適パラメタを検索。
　　→PF特に影響しない。
　　result-2019-10-23-00-36.xlsx

・トレイリングストップも併せて検索
　　stop_AF : 0.01
　　stop_AF_add : 0.02
　　stop_AF_max : 0.25 を採用
　　result-2019-10-22-23-57.xlsx

-------------------------------------------------------------------
bot_02_param.py
-------------------------------------------------------------------
最終更新日 2019/10/21

■仕様
もっともプロフィットファクターが高いパラメータ計算用
  プロフィットファクターの計算式　（総利益 ÷ 総損失）
  損失に対して最も利益が高いもの

1XBT = 現在の価格分のUSD
0.1XBT = USD / 10
0.01XBT = USD / 100

証拠金の正しい計算方法は、終値 x XBTの数 → ここまでは正しい
購入できるlot数が間違っている



lot は、XBT x 終値

■パラメタ検索第1弾結果：
result-2019-10-20-13-55.xlsx
時間軸	7200
買い期間	30
売り期間	40
ボラティリティ期間	20
トレードリスク	0.03
分割回数	20
判定基準	終値/終値
トレード回数	119
勝率	8.4
平均リターン	-0.32
ドローダウン	-17520
PF	10
最終損益	393085

PFに寄与するのは：
　分割回数：MAXの20ばかり→多ければ多いほど寄与する？
　  20〜50だと、PF,損益とも20と30に集中。20〜30で再実施
　ボラティリティ：20〜40の組み合わせはバラバラ。あまり関与しない？
　トレードリスク：0.01〜0.05だと0.02でPFが最大だが利益が少ない。0.02〜0.08までで再実施

■パラメタ検索第2弾結果：
result-2019-10-20-16-14.xlsx
PFが高い（負けない）：

時間軸	7200
買い期間	30
売り期間	40
ボラティリティ期間	20
トレードリスク	0.03
分割回数	21
判定基準	終値/終値
トレード回数	118
勝率	8.5
平均リターン	-0.34
ドローダウン	-17122
PF	10.48
最終損益	405209

利益が多い：

時間軸	7200
買い期間	30
売り期間	40
ボラティリティ期間	20
トレードリスク	0.08
分割回数	20
判定基準	終値/終値
トレード回数	118
勝率	8.5
平均リターン	-0.32
ドローダウン	-416134
PF	5.19
最終損益	3454772

■パラメタ検索第3弾結果：

上記PF最大ベースにストップレンジ、追加ポジションを調査
ストップレンジは1のみ
追加ポジションは2がベスト

■最終パラメタ検索：

買い期間、売り機関、ボラティリティ期間を18〜40で1刻みで調査
他は固定

-------------------------------------------------------------------
bot_02.py
-------------------------------------------------------------------
最終更新日 2019/10/19

■仕様

・価格取得
　 - cryptowatch XBT/USD
・エントリー条件
   - 増し玉 10分割
   - トレードリスク 7%
　 - ドンチャンブレイクアウト 30日期間
　 - ドテン
・パラボリックSAR トレイリングストップ
・稼働通知
   - LINE通知
   　 > 6時間ごとにポジションを通知
   　> エントリー、クローズを通知
・バックテスト

・ログファイル出力

基本性能　
テスト期間：
開始時点 : 2019/02/11 17:00
終了時点 : 2019/10/19 18:00
6000件のローソク足デ???タで検証
--------------------------
バックテストの結果
-----------------------------------
買いエントリの成績
-----------------------------------
トレード回数              :      95回
勝率                      :      11.6％
平均リターン              :      0.01％
総損益                    :      110237USD
平均保有期間              :      20.9足分
損切りの回数              :      86回
-----------------------------------
売りエントリの成績
-----------------------------------
トレード回数              :      93回
勝率                      :      2.2％
平均リターン              :      -0.88％
総損益                    :      165477USD
平均保有期間              :      12.2足分
損切りの回数              :      88回
-----------------------------------
総合の成績
-----------------------------------
全トレード数              :      188回
勝率                      :      6.9％
平均リターン              :      -0.43％
平均保有期間              :      16.6足分
損切りの回数              :      174回

最大の勝ちトレード :     204556USD
最大の負けトレード :     -7458USD
最大連敗回数              :      29回
最大ドローダウン          :      -53371USD / -16.2％
利益合計                  :      412725USD
損失合計                  :      -137011USD
最終損益                  :      275714USD

初期資金                  :      300USD
最終資金                  :      276014USD
運用成績                  :      92004.67％
手数料合計                :      -22689USD

-------------------------------------------------------------------
bot_01.py
-------------------------------------------------------------------
作成日　-
初版 -